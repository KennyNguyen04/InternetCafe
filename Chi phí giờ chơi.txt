private void TimeCount()
{
    sec++;
    if (sec > 59)
    {
        min++;
        sec = 0;
        MoneyCount($"{hour:D2}:{min:D2}"); // Gọi MoneyCount khi tăng phút
    }
    if (min > 59)
    {
        hour++;
        min = 0;
    }

    // Cập nhật thời gian hiển thị
    txtUsedTime.Text = $"{hour:D2}:{min:D2}";
    Console.WriteLine($"Thời gian hiện tại: {txtUsedTime.Text}");

    // Gọi MoneyCount khi thời gian sử dụng đạt ít nhất một phút
    if (hour > 0 || min > 0)
    {
        MoneyCount($"{hour:D2}:{min:D2}");
    }
}

private void MoneyCount(string useTime)
{
    try
    {
        Console.WriteLine($"Bắt đầu tính phí cho thời gian: {useTime}");

        // Kiểm tra định dạng thời gian
        if (!TimeSpan.TryParseExact(useTime, @"hh\:mm", CultureInfo.InvariantCulture, out TimeSpan timeUsed))
        {
            Console.WriteLine("Thời gian không hợp lệ.");
            return;
        }

        // Tính số phút đã sử dụng
        double minutesUsed = Math.Ceiling(timeUsed.TotalMinutes);
        Console.WriteLine($"Số phút đã sử dụng (làm tròn): {minutesUsed}");

        if (minutesUsed >= 1)
        {
            // Tính chi phí dựa trên số phút
            money = (clientManager.clientPrice / 60) * minutesUsed;

            // Cập nhật giao diện trong luồng chính
            if (InvokeRequired)
            {
                this.Invoke(new Action(() => txtUseTimeFee.Text = currencyFormat(money)));
            }
            else
            {
                txtUseTimeFee.Text = currencyFormat(money);
            }

            txtUseTimeFee.Refresh();
            Console.WriteLine($"Chi phí giờ chơi được cập nhật: {money}");
        }
        else
        {
            txtUseTimeFee.Text = "0";
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Lỗi trong MoneyCount: {ex.Message}");
    }
}

private string currencyFormat(double money)
{
    try
    {
        // Không làm tròn để kiểm tra giá trị
        return string.Format(new CultureInfo("en-US"), "{0:N0}", money);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Lỗi trong currencyFormat: {ex.Message}");
        return money.ToString("F2");
    }
}

private void timerProgram_Tick(object sender, EventArgs e)
{
    Console.WriteLine($"Timer Tick: Thời gian sử dụng {txtUsedTime.Text}, Chi phí giờ chơi {txtUseTimeFee.Text}");
    try
    {
        // Logic xử lý yêu cầu từ server và tính phí giờ chơi
        if (ClientManager.requestServer != -1)
        {
            TimeCount(); // Cập nhật thời gian và chi phí
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Lỗi trong timerProgram_Tick: {ex.Message}");
        Application.Exit();
    }
}